/* rubric-react-1.0.vapi generated by valac 0.34.7, do not modify. */

namespace RubricReact {
	[CCode (cheader_filename = "rubric-react.h")]
	public class Babel : GLib.Object {
		protected RubricReact.Environment environment;
		public Babel ();
		public bool cache_is_valid (string input_file_contents, string output_path);
		protected string get_file_header (string hash, string babel_version);
		public string get_output_path (string path);
		public string get_source_map_output_path (string path);
		protected RubricReact.JavaScriptWithSourceMap load_from_file_cache (string filename, string hash, bool force_generate_source_map);
		public string transform (string input, string filename = "unknown");
		public string transform_and_save_file (string filename);
		public string transform_file (string filename);
		public RubricReact.JavaScriptWithSourceMap transform_file_with_source_map (string filename, bool force_generate_source_map = false);
		protected RubricReact.JavaScriptWithSourceMap transform_with_header (string filename, string contents, string hash = null);
		public RubricReact.JavaScriptWithSourceMap transform_with_source_map (string input, string filename = "unknown");
	}
	[CCode (cheader_filename = "rubric-react.h")]
	public class Component<T> : GLib.Object {
		public Component ();
		public string render_html (bool render_container_only = false, bool render_server_only = false);
		public string render_javascript ();
		public string component_name { get; set; }
		public string container_class { get; set; }
		public string container_id { get; set; }
		public string container_tag { get; set; }
		public T props { get; set; }
	}
	[CCode (cheader_filename = "rubric-react.h")]
	public class Environment : GLib.Object {
		protected const int LARGE_STACK_SIZE;
		protected const string USER_SCRIPTS_LOADED_KEY;
		public Environment ();
		public RubricReact.Component create_component<T> (string componentName, T props, string container_id = null, bool client_only = false);
		public T execute<T> (string function, GLib.Value[] args);
		public T execute_with_babel<T> (string function, GLib.Value[] args);
		public string get_init_javascript (bool client_only = false);
		public bool has_variable (string name);
		public void return_engine_to_pool ();
		public RubricReact.Babel babel { get; }
		public Rubric.Container container { get; set construct; }
		public string engine_version { get; }
		public string version { get; }
	}
	[CCode (cheader_filename = "rubric-react.h")]
	public class JavaScriptWithSourceMap : GLib.Object {
		public JavaScriptWithSourceMap ();
		public RubricReact.SourceMap SourceMap { get; set; }
		public string babel_version { get; set; }
		public string code { get; set; }
		public string hash { get; set; }
	}
	[CCode (cheader_filename = "rubric-react.h")]
	public class SourceMap : GLib.Object {
		public SourceMap ();
		public string file { get; set; }
		public string mappings { get; set; }
		public string[] names { get; set; }
		public string source_root { get; set; }
		public string[] sources { get; set; }
		public string[] sources_content { get; set; }
		public int version { get; set; }
	}
}
