/* test-objects.vapi generated by valac 0.34.7, do not modify. */

[CCode (gir_namespace = "TestObjects", gir_version = "1.0")]
namespace TestObjects {
	namespace Drawing {
		[CCode (cheader_filename = "test-objects.h")]
		public struct Color {
			public string name;
			public long value;
			public short knownColor;
			public short state;
			public static TestObjects.Drawing.Color FromArgb (int red, int green, int blue, int alpha = uint8.MAX);
			public float GetBrightness ();
			public float GetHue ();
			public float GetSaturation ();
			public string to_string ();
			public uint8 A { get; }
			public uint8 B { get; }
			public uint8 G { get; }
			public bool IsKnownColor { get; }
			public string Name { owned get; }
			public static TestObjects.Drawing.Color OrangeRed { owned get; }
			public uint8 R { get; }
		}
		[CCode (cheader_filename = "test-objects.h")]
		public struct Point {
			public int _x;
			public int _y;
			public Point (int x, int y);
			public string to_string ();
			public bool is_empty { get; }
			public int x { get; set; }
			public int y { get; set; }
		}
		[CCode (cheader_filename = "test-objects.h")]
		public enum KnownColor {
			ORANGE_RED
		}
	}
	[CCode (cheader_filename = "test-objects.h")]
	public class Base64Encoder {
		public const int DATA_URI_MAX;
		public Base64Encoder ();
		public static string encode (string value);
	}
	[CCode (cheader_filename = "test-objects.h")]
	public class FileManager : GLib.Object {
		public FileManager ();
		public string ReadFile (string path);
	}
	[CCode (cheader_filename = "test-objects.h")]
	public class Person : GLib.Object {
		public Person (string firstName, string lastName);
		public string to_string ();
		public string first_name { get; set; }
		public string last_name { get; set; }
	}
	[CCode (cheader_filename = "test-objects.h")]
	public class Product {
		public string name;
		public double price;
		public Product (string name, double price);
	}
	[CCode (cheader_filename = "test-objects.h")]
	public class SimpleSingleton : GLib.Object {
		public static TestObjects.SimpleSingleton Instance;
		public string to_string ();
	}
	[CCode (cheader_filename = "test-objects.h")]
	public struct Date {
		public int Year;
		public int Month;
		public int Day;
		public Date (int year, int month, int day);
		public int GetDayOfYear ();
		public static bool IsLeapYear (int year);
		public static TestObjects.Date Today { get; }
	}
	[CCode (cheader_filename = "test-objects.h")]
	public struct Point3D {
		public int x;
		public int y;
		public int z;
		public Point3D (int x, int y, int z);
		public string to_string ();
	}
	[CCode (cheader_filename = "test-objects.h")]
	public struct PredefinedStrings {
		public int dummy;
		public const string ANOTHER_VERY_LONG_NAME;
		public const string THE_LAST_VERY_LONG_NAME;
		public const string VERY_LONG_NAME;
	}
	[CCode (cheader_filename = "test-objects.h")]
	public struct Temperature {
		public double _celsius;
		public Temperature (double degree, TestObjects.TemperatureUnits units);
		public string to_string ();
		public string to_string_with_units (TestObjects.TemperatureUnits units);
		public double Celsius { get; set; }
		public double Fahrenheit { get; set; }
		public double Kelvin { get; set; }
	}
	[CCode (cheader_filename = "test-objects.h")]
	public enum TemperatureUnits {
		Celsius,
		Kelvin,
		Fahrenheit
	}
}
