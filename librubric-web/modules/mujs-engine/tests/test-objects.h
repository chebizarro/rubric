/* test-objects.h generated by valac 0.34.7, the Vala compiler, do not modify */


#ifndef __TEST_OBJECTS_H__
#define __TEST_OBJECTS_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS


#define TEST_OBJECTS_TYPE_DATE (test_objects_date_get_type ())
typedef struct _TestObjectsDate TestObjectsDate;

#define TEST_OBJECTS_TYPE_FILE_MANAGER (test_objects_file_manager_get_type ())
#define TEST_OBJECTS_FILE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TEST_OBJECTS_TYPE_FILE_MANAGER, TestObjectsFileManager))
#define TEST_OBJECTS_FILE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TEST_OBJECTS_TYPE_FILE_MANAGER, TestObjectsFileManagerClass))
#define TEST_OBJECTS_IS_FILE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TEST_OBJECTS_TYPE_FILE_MANAGER))
#define TEST_OBJECTS_IS_FILE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TEST_OBJECTS_TYPE_FILE_MANAGER))
#define TEST_OBJECTS_FILE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TEST_OBJECTS_TYPE_FILE_MANAGER, TestObjectsFileManagerClass))

typedef struct _TestObjectsFileManager TestObjectsFileManager;
typedef struct _TestObjectsFileManagerClass TestObjectsFileManagerClass;
typedef struct _TestObjectsFileManagerPrivate TestObjectsFileManagerPrivate;

#define TEST_OBJECTS_TYPE_PRODUCT (test_objects_product_get_type ())
#define TEST_OBJECTS_PRODUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TEST_OBJECTS_TYPE_PRODUCT, TestObjectsProduct))
#define TEST_OBJECTS_PRODUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TEST_OBJECTS_TYPE_PRODUCT, TestObjectsProductClass))
#define TEST_OBJECTS_IS_PRODUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TEST_OBJECTS_TYPE_PRODUCT))
#define TEST_OBJECTS_IS_PRODUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TEST_OBJECTS_TYPE_PRODUCT))
#define TEST_OBJECTS_PRODUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TEST_OBJECTS_TYPE_PRODUCT, TestObjectsProductClass))

typedef struct _TestObjectsProduct TestObjectsProduct;
typedef struct _TestObjectsProductClass TestObjectsProductClass;
typedef struct _TestObjectsProductPrivate TestObjectsProductPrivate;

#define TEST_OBJECTS_TYPE_PERSON (test_objects_person_get_type ())
#define TEST_OBJECTS_PERSON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TEST_OBJECTS_TYPE_PERSON, TestObjectsPerson))
#define TEST_OBJECTS_PERSON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TEST_OBJECTS_TYPE_PERSON, TestObjectsPersonClass))
#define TEST_OBJECTS_IS_PERSON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TEST_OBJECTS_TYPE_PERSON))
#define TEST_OBJECTS_IS_PERSON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TEST_OBJECTS_TYPE_PERSON))
#define TEST_OBJECTS_PERSON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TEST_OBJECTS_TYPE_PERSON, TestObjectsPersonClass))

typedef struct _TestObjectsPerson TestObjectsPerson;
typedef struct _TestObjectsPersonClass TestObjectsPersonClass;
typedef struct _TestObjectsPersonPrivate TestObjectsPersonPrivate;

#define TEST_OBJECTS_TYPE_POINT3_D (test_objects_point3_d_get_type ())
typedef struct _TestObjectsPoint3D TestObjectsPoint3D;

#define TEST_OBJECTS_TYPE_BASE64_ENCODER (test_objects_base64_encoder_get_type ())
#define TEST_OBJECTS_BASE64_ENCODER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TEST_OBJECTS_TYPE_BASE64_ENCODER, TestObjectsBase64Encoder))
#define TEST_OBJECTS_BASE64_ENCODER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TEST_OBJECTS_TYPE_BASE64_ENCODER, TestObjectsBase64EncoderClass))
#define TEST_OBJECTS_IS_BASE64_ENCODER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TEST_OBJECTS_TYPE_BASE64_ENCODER))
#define TEST_OBJECTS_IS_BASE64_ENCODER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TEST_OBJECTS_TYPE_BASE64_ENCODER))
#define TEST_OBJECTS_BASE64_ENCODER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TEST_OBJECTS_TYPE_BASE64_ENCODER, TestObjectsBase64EncoderClass))

typedef struct _TestObjectsBase64Encoder TestObjectsBase64Encoder;
typedef struct _TestObjectsBase64EncoderClass TestObjectsBase64EncoderClass;
typedef struct _TestObjectsBase64EncoderPrivate TestObjectsBase64EncoderPrivate;

#define TEST_OBJECTS_TYPE_PREDEFINED_STRINGS (test_objects_predefined_strings_get_type ())
typedef struct _TestObjectsPredefinedStrings TestObjectsPredefinedStrings;

#define TEST_OBJECTS_TYPE_SIMPLE_SINGLETON (test_objects_simple_singleton_get_type ())
#define TEST_OBJECTS_SIMPLE_SINGLETON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TEST_OBJECTS_TYPE_SIMPLE_SINGLETON, TestObjectsSimpleSingleton))
#define TEST_OBJECTS_SIMPLE_SINGLETON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TEST_OBJECTS_TYPE_SIMPLE_SINGLETON, TestObjectsSimpleSingletonClass))
#define TEST_OBJECTS_IS_SIMPLE_SINGLETON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TEST_OBJECTS_TYPE_SIMPLE_SINGLETON))
#define TEST_OBJECTS_IS_SIMPLE_SINGLETON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TEST_OBJECTS_TYPE_SIMPLE_SINGLETON))
#define TEST_OBJECTS_SIMPLE_SINGLETON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TEST_OBJECTS_TYPE_SIMPLE_SINGLETON, TestObjectsSimpleSingletonClass))

typedef struct _TestObjectsSimpleSingleton TestObjectsSimpleSingleton;
typedef struct _TestObjectsSimpleSingletonClass TestObjectsSimpleSingletonClass;
typedef struct _TestObjectsSimpleSingletonPrivate TestObjectsSimpleSingletonPrivate;

#define TEST_OBJECTS_TYPE_TEMPERATURE (test_objects_temperature_get_type ())
typedef struct _TestObjectsTemperature TestObjectsTemperature;

#define TEST_OBJECTS_TYPE_TEMPERATURE_UNITS (test_objects_temperature_units_get_type ())

#define TEST_OBJECTS_DRAWING_TYPE_POINT (test_objects_drawing_point_get_type ())
typedef struct _TestObjectsDrawingPoint TestObjectsDrawingPoint;

#define TEST_OBJECTS_DRAWING_TYPE_KNOWN_COLOR (test_objects_drawing_known_color_get_type ())

#define TEST_OBJECTS_DRAWING_TYPE_COLOR (test_objects_drawing_color_get_type ())
typedef struct _TestObjectsDrawingColor TestObjectsDrawingColor;

struct _TestObjectsDate {
	gint Year;
	gint Month;
	gint Day;
};

struct _TestObjectsFileManager {
	GObject parent_instance;
	TestObjectsFileManagerPrivate * priv;
};

struct _TestObjectsFileManagerClass {
	GObjectClass parent_class;
};

struct _TestObjectsProduct {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TestObjectsProductPrivate * priv;
	gchar* name;
	gdouble price;
};

struct _TestObjectsProductClass {
	GTypeClass parent_class;
	void (*finalize) (TestObjectsProduct *self);
};

struct _TestObjectsPerson {
	GObject parent_instance;
	TestObjectsPersonPrivate * priv;
};

struct _TestObjectsPersonClass {
	GObjectClass parent_class;
};

struct _TestObjectsPoint3D {
	gint x;
	gint y;
	gint z;
};

struct _TestObjectsBase64Encoder {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TestObjectsBase64EncoderPrivate * priv;
};

struct _TestObjectsBase64EncoderClass {
	GTypeClass parent_class;
	void (*finalize) (TestObjectsBase64Encoder *self);
};

struct _TestObjectsPredefinedStrings {
	gint dummy;
};

struct _TestObjectsSimpleSingleton {
	GObject parent_instance;
	TestObjectsSimpleSingletonPrivate * priv;
};

struct _TestObjectsSimpleSingletonClass {
	GObjectClass parent_class;
};

struct _TestObjectsTemperature {
	gdouble _celsius;
};

typedef enum  {
	TEST_OBJECTS_TEMPERATURE_UNITS_Celsius,
	TEST_OBJECTS_TEMPERATURE_UNITS_Kelvin,
	TEST_OBJECTS_TEMPERATURE_UNITS_Fahrenheit
} TestObjectsTemperatureUnits;

struct _TestObjectsDrawingPoint {
	gint _x;
	gint _y;
};

typedef enum  {
	TEST_OBJECTS_DRAWING_KNOWN_COLOR_ORANGE_RED = 128
} TestObjectsDrawingKnownColor;

struct _TestObjectsDrawingColor {
	gchar* name;
	glong value;
	gshort knownColor;
	gshort state;
};


GType test_objects_date_get_type (void) G_GNUC_CONST;
TestObjectsDate* test_objects_date_dup (const TestObjectsDate* self);
void test_objects_date_free (TestObjectsDate* self);
void test_objects_date_init (TestObjectsDate *self, gint year, gint month, gint day);
gboolean test_objects_date_IsLeapYear (gint year);
gint test_objects_date_GetDayOfYear (TestObjectsDate *self);
void test_objects_date_get_Today (TestObjectsDate* result);
GType test_objects_file_manager_get_type (void) G_GNUC_CONST;
gchar* test_objects_file_manager_ReadFile (TestObjectsFileManager* self, const gchar* path);
TestObjectsFileManager* test_objects_file_manager_new (void);
TestObjectsFileManager* test_objects_file_manager_construct (GType object_type);
gpointer test_objects_product_ref (gpointer instance);
void test_objects_product_unref (gpointer instance);
GParamSpec* test_objects_param_spec_product (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void test_objects_value_set_product (GValue* value, gpointer v_object);
void test_objects_value_take_product (GValue* value, gpointer v_object);
gpointer test_objects_value_get_product (const GValue* value);
GType test_objects_product_get_type (void) G_GNUC_CONST;
TestObjectsProduct* test_objects_product_new (const gchar* name, gdouble price);
TestObjectsProduct* test_objects_product_construct (GType object_type, const gchar* name, gdouble price);
GType test_objects_person_get_type (void) G_GNUC_CONST;
TestObjectsPerson* test_objects_person_new (const gchar* firstName, const gchar* lastName);
TestObjectsPerson* test_objects_person_construct (GType object_type, const gchar* firstName, const gchar* lastName);
gchar* test_objects_person_to_string (TestObjectsPerson* self);
const gchar* test_objects_person_get_first_name (TestObjectsPerson* self);
void test_objects_person_set_first_name (TestObjectsPerson* self, const gchar* value);
const gchar* test_objects_person_get_last_name (TestObjectsPerson* self);
void test_objects_person_set_last_name (TestObjectsPerson* self, const gchar* value);
GType test_objects_point3_d_get_type (void) G_GNUC_CONST;
TestObjectsPoint3D* test_objects_point3_d_dup (const TestObjectsPoint3D* self);
void test_objects_point3_d_free (TestObjectsPoint3D* self);
void test_objects_point3_d_init (TestObjectsPoint3D *self, gint x, gint y, gint z);
gchar* test_objects_point3_d_to_string (TestObjectsPoint3D *self);
gpointer test_objects_base64_encoder_ref (gpointer instance);
void test_objects_base64_encoder_unref (gpointer instance);
GParamSpec* test_objects_param_spec_base64_encoder (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void test_objects_value_set_base64_encoder (GValue* value, gpointer v_object);
void test_objects_value_take_base64_encoder (GValue* value, gpointer v_object);
gpointer test_objects_value_get_base64_encoder (const GValue* value);
GType test_objects_base64_encoder_get_type (void) G_GNUC_CONST;
#define TEST_OBJECTS_BASE64_ENCODER_DATA_URI_MAX 32768
gchar* test_objects_base64_encoder_encode (const gchar* value);
TestObjectsBase64Encoder* test_objects_base64_encoder_new (void);
TestObjectsBase64Encoder* test_objects_base64_encoder_construct (GType object_type);
GType test_objects_predefined_strings_get_type (void) G_GNUC_CONST;
TestObjectsPredefinedStrings* test_objects_predefined_strings_dup (const TestObjectsPredefinedStrings* self);
void test_objects_predefined_strings_free (TestObjectsPredefinedStrings* self);
#define TEST_OBJECTS_PREDEFINED_STRINGS_VERY_LONG_NAME "Very Long Name"
#define TEST_OBJECTS_PREDEFINED_STRINGS_ANOTHER_VERY_LONG_NAME "Another Very Long Name"
#define TEST_OBJECTS_PREDEFINED_STRINGS_THE_LAST_VERY_LONG_NAME "The Last Very Long Name"
GType test_objects_simple_singleton_get_type (void) G_GNUC_CONST;
extern TestObjectsSimpleSingleton* test_objects_simple_singleton_Instance;
gchar* test_objects_simple_singleton_to_string (TestObjectsSimpleSingleton* self);
GType test_objects_temperature_get_type (void) G_GNUC_CONST;
TestObjectsTemperature* test_objects_temperature_dup (const TestObjectsTemperature* self);
void test_objects_temperature_free (TestObjectsTemperature* self);
GType test_objects_temperature_units_get_type (void) G_GNUC_CONST;
void test_objects_temperature_init (TestObjectsTemperature *self, gdouble degree, TestObjectsTemperatureUnits units);
gchar* test_objects_temperature_to_string (TestObjectsTemperature *self);
gchar* test_objects_temperature_to_string_with_units (TestObjectsTemperature *self, TestObjectsTemperatureUnits units);
gdouble test_objects_temperature_get_Celsius (TestObjectsTemperature* self);
void test_objects_temperature_set_Celsius (TestObjectsTemperature* self, gdouble value);
gdouble test_objects_temperature_get_Kelvin (TestObjectsTemperature* self);
void test_objects_temperature_set_Kelvin (TestObjectsTemperature* self, gdouble value);
gdouble test_objects_temperature_get_Fahrenheit (TestObjectsTemperature* self);
void test_objects_temperature_set_Fahrenheit (TestObjectsTemperature* self, gdouble value);
GType test_objects_drawing_point_get_type (void) G_GNUC_CONST;
TestObjectsDrawingPoint* test_objects_drawing_point_dup (const TestObjectsDrawingPoint* self);
void test_objects_drawing_point_free (TestObjectsDrawingPoint* self);
void test_objects_drawing_point_init (TestObjectsDrawingPoint *self, gint x, gint y);
gchar* test_objects_drawing_point_to_string (TestObjectsDrawingPoint *self);
gint test_objects_drawing_point_get_x (TestObjectsDrawingPoint* self);
void test_objects_drawing_point_set_x (TestObjectsDrawingPoint* self, gint value);
gint test_objects_drawing_point_get_y (TestObjectsDrawingPoint* self);
void test_objects_drawing_point_set_y (TestObjectsDrawingPoint* self, gint value);
gboolean test_objects_drawing_point_get_is_empty (TestObjectsDrawingPoint* self);
GType test_objects_drawing_known_color_get_type (void) G_GNUC_CONST;
GType test_objects_drawing_color_get_type (void) G_GNUC_CONST;
TestObjectsDrawingColor* test_objects_drawing_color_dup (const TestObjectsDrawingColor* self);
void test_objects_drawing_color_free (TestObjectsDrawingColor* self);
void test_objects_drawing_color_copy (const TestObjectsDrawingColor* self, TestObjectsDrawingColor* dest);
void test_objects_drawing_color_destroy (TestObjectsDrawingColor* self);
void test_objects_drawing_color_FromArgb (gint red, gint green, gint blue, gint alpha, TestObjectsDrawingColor* result);
gfloat test_objects_drawing_color_GetBrightness (TestObjectsDrawingColor *self);
gfloat test_objects_drawing_color_GetHue (TestObjectsDrawingColor *self);
gfloat test_objects_drawing_color_GetSaturation (TestObjectsDrawingColor *self);
gchar* test_objects_drawing_color_to_string (TestObjectsDrawingColor *self);
gboolean test_objects_drawing_color_get_IsKnownColor (TestObjectsDrawingColor* self);
gchar* test_objects_drawing_color_get_Name (TestObjectsDrawingColor* self);
void test_objects_drawing_color_get_OrangeRed (TestObjectsDrawingColor* result);
guint8 test_objects_drawing_color_get_R (TestObjectsDrawingColor* self);
guint8 test_objects_drawing_color_get_G (TestObjectsDrawingColor* self);
guint8 test_objects_drawing_color_get_B (TestObjectsDrawingColor* self);
guint8 test_objects_drawing_color_get_A (TestObjectsDrawingColor* self);


G_END_DECLS

#endif
